add feild of first name, last name, phone number
make it editable done

user can create a post - done
 delete a post


comments/reply
Trending Posts
Custom Slugs - done
Meta Data
rich-text - done (but more customisation needded-not functional)
User Dashboard
Social Media Sharing // done 
text-to-specch
Dark Mode
Scheduled Posts 

/follow user (advance) - done

/Like, comments --- done (comment, reply more style needed)


/search---done
post.title as a search feature

/User Dashboard-done (more changes needed)

/Trending Posts - done
1. Most comment and like in last 6h is trending post

/text-to-specch

/text-editable - done (more functional)

/custom-slug - done

/Scheduled-post

/Meta Data

/User Acitve option

/Add picture option
/featured post
/suggested post

/listen to podcast
/category creation - creating new post by selctiing category, then we will fetch it to homepage

/Footer


/changes need to do- for better UI
1. Font 
2.background white , navbar, footer (black)
3. Categories fetch post
4. grding post 1 by 3 
5.image add








/api/reaction/trending - most visited page
import { connectToDatabase } from "@/backend/lib/mongodb";
import Post from "@/backend/Schema/PostsSchema";

export async function GET() {
    try {
        await connectToDatabase();

        const sixHoursAgo = new Date();
        sixHoursAgo.setHours(sixHoursAgo.getHours() - 6);

        const trendingPost = await Post.aggregate([
            {
                $addFields: {
                    likesArray: { $ifNull: ["$likes", []] },
                    filteredComments: {
                        $filter: {
                            input: "$comments",
                            as: "comment",
                            cond: { $gte: ["$$comment.createdAt", sixHoursAgo] }
                        }
                    }
                }
            },
            {
                $addFields: {
                    engagementScore: {
                        $add: [{ $size: "$likesArray" }, { $size: { $ifNull: ["$filteredComments", []] } }]
                    },
                    latestCommentTime: { $max: "$filteredComments.createdAt" }
                }
            },
            { $sort: { engagementScore: -1, latestCommentTime: -1 } },
            { $limit: 1 }
        ]);

        if (!trendingPost.length) {
            return new Response(JSON.stringify({ message: "No trending post found" }), {
                status: 404,
                headers: { "Content-Type": "application/json" }
            });
        }

        return new Response(JSON.stringify({ post: trendingPost[0] }), {
            status: 200,
            headers: { "Content-Type": "application/json" }
        });

    } catch (error) {
        console.error("Error fetching trending post:", error);
        return new Response(JSON.stringify({ error: "Internal Server Error" }), {
            status: 500,
            headers: { "Content-Type": "application/json" }
        });
    }
}


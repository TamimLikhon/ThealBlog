add feild of first name, last name, phone number
make it editable done

user can create a post - done
 delete a post


comments/reply
Trending Posts
Custom Slugs - done
Meta Data
rich-text - done (but more customisation needded-not functional)
User Dashboard
Social Media Sharing // done 
text-to-specch
Dark Mode
Scheduled Posts 

/follow user (advance) - done

/Like, comments --- done (comment, reply more style needed)


/search---done
post.title as a search feature

/User Dashboard-done (more changes needed)

/Trending Posts - done
1. Most comment and like in last 6h is trending post

/text-editable - done (more functional)

/custom-slug - done

/Scheduled-post

/Meta Data

/Add picture option - done - customisation needed
/featured post
/suggested post

/listen to podcast

/Footer - done


/insteading of importing component directly to homepage, we will fetch data seperately for each segment - trending post, feature post, suggested post



/add image feature - done
 add category -- create some cateogry prefdifend - done
 1. category option at the time of creating Posts
 2. on user profile add another field name categoreis you like
 3. After creating a post on particular category - if user selcted that it will be shown 




/api/reaction/trending - most visited page
import { connectToDatabase } from "@/backend/lib/mongodb";
import Post from "@/backend/Schema/PostsSchema";

export async function GET() {
    try {
        await connectToDatabase();

        const sixHoursAgo = new Date();
        sixHoursAgo.setHours(sixHoursAgo.getHours() - 6);

        const trendingPost = await Post.aggregate([
            {
                $addFields: {
                    likesArray: { $ifNull: ["$likes", []] },
                    filteredComments: {
                        $filter: {
                            input: "$comments",
                            as: "comment",
                            cond: { $gte: ["$$comment.createdAt", sixHoursAgo] }
                        }
                    }
                }
            },
            {
                $addFields: {
                    engagementScore: {
                        $add: [{ $size: "$likesArray" }, { $size: { $ifNull: ["$filteredComments", []] } }]
                    },
                    latestCommentTime: { $max: "$filteredComments.createdAt" }
                }
            },
            { $sort: { engagementScore: -1, latestCommentTime: -1 } },
            { $limit: 1 }
        ]);

        if (!trendingPost.length) {
            return new Response(JSON.stringify({ message: "No trending post found" }), {
                status: 404,
                headers: { "Content-Type": "application/json" }
            });
        }

        return new Response(JSON.stringify({ post: trendingPost[0] }), {
            status: 200,
            headers: { "Content-Type": "application/json" }
        });

    } catch (error) {
        console.error("Error fetching trending post:", error);
        return new Response(JSON.stringify({ error: "Internal Server Error" }), {
            status: 500,
            headers: { "Content-Type": "application/json" }
        });
    }
}

/admin panel - 26.0.25 failed
1. prefdifend userSchema - for admin
2.Sign in through auth
3.admin panel


/30March
UserProfile
UI



03.04.25 - on the loading period whole page should be fetched
promise.all (home, profile)

04.04.25 - font, text color(home) page
Myblog, feeds, customfeed - bg-white, font, color black
feeds - vertical all post shown at once, add read more, add comment box
custom feed - bg-white,font-black, font, gap between post and comment reduce, design it like facebook
Write a blog - A more customisable writing interface.

1.personal Dashboard : how many visitor seen your profile
how many likes you got, how many comments 

2.notification bar


mobile optimized -
home | Featurepost, trending, ainews, crypto,
 navbar, searchcomp, feed, following feed, signin

Dashboard-profile Dashboard
feed - add comment section, 
createpost - make to more advance, 
indiviudal post - fit to screen



to track data perfectly -signin is essential


if I can specifiy only the url localhost:3000/feeds/[title] - this will reduce the req
all the blog leads to localhost:3000/feeds/[title]
all blogs under the api - api/fetchpost
currently I am sending the url to backend, instead of that send title
then connect the postschema with trackvisitschmea(contains title) 

then run a basic filter - trackvisit title.findone("authoremail") {
   if signed in email == authoremail{
        then track the time {opening vs closing tab} - store in visitimespan
    }
}
#crcuial part - read time,